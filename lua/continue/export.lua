-- Export utilities for Continue chat sessions
-- Supports markdown format for documentation

local M = {}

--- Export chat history to markdown format
--- @param history table[] - Chat history from server state
--- @return string - Formatted markdown
function M.to_markdown(history)
  if not history or #history == 0 then
    return "# Continue.nvim Chat Export\n\n*No messages in conversation*\n"
  end

  local lines = {}

  -- Header
  table.insert(lines, "# Continue.nvim Chat Export")
  table.insert(lines, "")
  table.insert(lines, string.format("**Exported**: %s", os.date("%Y-%m-%d %H:%M:%S")))
  table.insert(lines, string.format("**Messages**: %d", #history))
  table.insert(lines, "")
  table.insert(lines, "---")
  table.insert(lines, "")

  -- Messages
  for i, msg in ipairs(history) do
    local role = msg.role or "unknown"
    local content = msg.content or ""

    -- Role header
    if role == "user" then
      table.insert(lines, "## 🧑 You")
    elseif role == "assistant" then
      table.insert(lines, "## 🤖 Assistant")
    elseif role == "system" then
      table.insert(lines, "## ⚙️ System")
    else
      table.insert(lines, "## " .. role:upper())
    end

    table.insert(lines, "")

    -- Handle special message types
    if msg.messageType == "tool-start" then
      table.insert(lines, string.format("**Tool Execution**: %s", msg.toolName or "unknown"))
      table.insert(lines, "")
      table.insert(lines, "*Starting execution...*")
    elseif msg.messageType == "tool-result" then
      table.insert(lines, string.format("**Tool Result**: %s", msg.toolName or "unknown"))
      table.insert(lines, "")
      if msg.toolResult and msg.toolResult ~= "" then
        table.insert(lines, "```")
        table.insert(lines, msg.toolResult)
        table.insert(lines, "```")
      else
        table.insert(lines, "*No output*")
      end
    elseif msg.messageType == "tool-error" then
      table.insert(lines, string.format("**Tool Error**: %s", msg.toolName or "unknown"))
      table.insert(lines, "")
      table.insert(lines, "```")
      table.insert(lines, content)
      table.insert(lines, "```")
    else
      -- Regular message content
      table.insert(lines, content)
    end

    table.insert(lines, "")

    -- Separator between messages (except last)
    if i < #history then
      table.insert(lines, "---")
      table.insert(lines, "")
    end
  end

  -- Footer
  table.insert(lines, "---")
  table.insert(lines, "")
  table.insert(lines, "*Generated by [continue.nvim](https://github.com/your-repo/continue.nvim)*")

  return table.concat(lines, "\n")
end

--- Export chat history to a file
--- @param history table[] - Chat history
--- @param filepath string - Output file path
--- @return boolean, string? - Success status and error message
function M.to_file(history, filepath)
  local markdown = M.to_markdown(history)

  local file, err = io.open(filepath, "w")
  if not file then
    return false, "Failed to open file: " .. (err or "unknown error")
  end

  file:write(markdown)
  file:close()

  return true, nil
end

--- Export with automatic filename
--- @param history table[] - Chat history
--- @param base_dir string|nil - Base directory (defaults to cwd)
--- @return string|nil, string? - Filename or nil, error message
function M.auto_export(history, base_dir)
  base_dir = base_dir or vim.fn.getcwd()

  -- Generate filename with timestamp
  local timestamp = os.date("%Y%m%d_%H%M%S")
  local filename = string.format("continue_chat_%s.md", timestamp)
  local filepath = base_dir .. "/" .. filename

  local success, err = M.to_file(history, filepath)
  if not success then
    return nil, err
  end

  return filepath, nil
end

return M
